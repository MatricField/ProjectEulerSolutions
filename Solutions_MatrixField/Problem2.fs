//https://projecteuler.net/problem=2

(*
 *Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 *)

module Problem2

let MAX = 4000000I

module Method1 =
    let rec fib = function
        |n when n = 0I -> 0I
        |n when n = 1I -> 1I
        |n -> fib(n-1I) + fib(n-2I)

    let rec search lst n =
        match (fib n) with
        | a when a < MAX && (a%2I = 0I) -> search (a::lst) (n+1I)
        | a when a < MAX -> search lst (n+1I)
        | _ -> lst
        
    let solve a =
        search [] 0I
        |>List.sum
        |>printfn "%A\n"

module Method2 = 
    let fib n =
        let rec loop prev1 prev2 = function
            |n when n = 0I -> prev1
            |n -> loop (prev1 + prev2) prev1 (n - 1I)
        loop 1I 0I n

    //function that generate a list of even fib numbers in range [0..max)
    let generateList max =
        let rec search lst n =
            match (fib n) with
            | a when a < max && (a%2I = 0I) -> search (a::lst) (n+1I)
            | a when a < max -> search lst (n+1I)
            | _ -> lst
        search [] 0I
        
    let solve () =
        generateList MAX
        |>List.sum
        |>printfn "%A"

let main argv = 
    Method1.solve ()

    Method2.solve ()

    0 // return an integer exit code
